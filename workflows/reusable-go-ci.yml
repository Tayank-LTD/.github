name: Reusable Go CI

on:
  workflow_call:
    inputs:
      go-version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.22.x"

      working-directory:
        description: "Working directory for the Go project"
        required: false
        type: string
        default: "."

      coverage-threshold:
        description: "Minimum acceptable coverage percentage"
        required: false
        type: number
        default: 75

      build-binary:
        description: "Build the Go binary after tests"
        required: false
        type: boolean
        default: true

      docker-build:
        description: "Build Docker image for the Go service"
        required: false
        type: boolean
        default: false

      docker-image-name:
        description: "Docker image name (if docker-build=true)"
        required: false
        type: string
        default: "go-service"

      docker-tag:
        description: "Docker image tag"
        required: false
        type: string
        default: "latest"

      push-docker:
        description: "Push Docker image to registry"
        required: false
        type: boolean
        default: false

jobs:
  go-ci:
    name: 🧩 Go CI Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Verify Go environment
        run: |
          go version
          go env

      - name: Install dependencies
        run: go mod download

      - name: Lint code
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ${{ inputs.working-directory }}
          args: --timeout=5m

      - name: Vet and static check
        run: |
          go vet ./...
          staticcheck ./... || true

      - name: Run tests with coverage
        run: go test ./... -v -coverprofile=coverage.out -covermode=atomic

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${coverage}%"
          if (( $(echo "$coverage < ${{ inputs.coverage-threshold }}" | bc -l) )); then
            echo "❌ Coverage ${coverage}% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          else
            echo "✅ Coverage ${coverage}% meets threshold ${{ inputs.coverage-threshold }}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ${{ inputs.working-directory }}/coverage.out
          flags: go
          name: go-ci

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: ${{ inputs.working-directory }}/coverage.out
          retention-days: 7

      - name: Build binary
        if: ${{ inputs.build-binary }}
        run: |
          go build -o app .
          echo "✅ Binary built successfully."

      - name: Upload binary
        if: ${{ inputs.build-binary }}
        uses: actions/upload-artifact@v4
        with:
          name: go-binary
          path: ${{ inputs.working-directory }}/app
          retention-days: 7

      - name: Build Docker image
        if: ${{ inputs.docker-build }}
        run: |
          echo "🐳 Building Docker image..."
          docker build -t ${{ inputs.docker-image-name }}:${{ inputs.docker-tag }} .

      - name: Push Docker image
        if: ${{ inputs.push-docker }}
        env:
          DOCKER_IMAGE: ${{ inputs.docker-image-name }}
          DOCKER_TAG: ${{ inputs.docker-tag }}
        run: |
          echo "📦 Pushing Docker image to registry..."
          docker push $DOCKER_IMAGE:$DOCKER_TAG
