name: 🏷️ Etiketleri Senkronize Et

on:
  push:
    branches: [main]
    paths: 
      - '.github/labels.yml'
      - '.github/workflows/labels.yml'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Test modunda çalıştır (değişiklik yapma)'
        required: false
        default: false
        type: boolean

env:
  LABELS_FILE: '.github/labels.yml'

jobs:
  sync-labels:
    name: 🔄 Etiketleri Senkronize Et
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    # Job seviyesinde timeout
    timeout-minutes: 10
    
    steps:
      - name: 📥 Repository'yi Çek
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ GitHub Etiketlerini Senkronize Et
        uses: crazy-max/ghaction-github-labeler@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          yaml-file: ${{ env.LABELS_FILE }}
          skip-delete: false
          dry-run: ${{ github.event.inputs.dry-run || false }}
          exclude: |
            .github/**/*
            README.md
            LICENSE

      - name: 📊 Etiket Durumunu Kontrol Et
        if: always()
        run: |
          echo "## 🏷️ Etiket Senkronizasyon Durumu" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Çalışma Modu:** ${{ github.event.inputs.dry-run && 'Dry Run (Test)' || 'Production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Etiket Dosyası:** ${{ env.LABELS_FILE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **Durum:** Başarılı" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.dry-run }}" = "true" ]; then
              echo "ℹ️ Dry run modunda çalıştırıldı - gerçek değişiklik yapılmadı" >> $GITHUB_STEP_SUMMARY
            else
              echo "🎉 Etiketler başarıyla senkronize edildi" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Durum:** Başarısız" >> $GITHUB_STEP_SUMMARY
            echo "Hata detayları için logları kontrol edin" >> $GITHUB_STEP_SUMMARY
          fi

  # Etiket kullanım istatistiklerini topla
  label-stats:
    name: 📈 Etiket İstatistikleri
    runs-on: ubuntu-latest
    needs: sync-labels
    if: always() && !github.event.inputs.dry-run
    timeout-minutes: 5
    
    steps:
      - name: 📥 Repository'yi Çek
        uses: actions/checkout@v4

      - name: 📊 Etiket İstatistiklerini Topla
        run: |
          echo "## 📊 Etiket İstatistikleri" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Toplam etiket sayısını hesapla
          TOTAL_LABELS=$(grep -c "^- name:" ${{ env.LABELS_FILE }} || true)
          echo "**Toplam Etiket Sayısı:** $TOTAL_LABELS" >> $GITHUB_STEP_SUMMARY
          
          # Kategori bazlı sayılar
          echo "**Kategori Dağılımı:**" >> $GITHUB_STEP_SUMMARY
          TYPE_LABELS=$(grep -c "type:" ${{ env.LABELS_FILE }} || true)
          PRIORITY_LABELS=$(grep -c "priority:" ${{ env.LABELS_FILE }} || true)
          STATUS_LABELS=$(grep -c "status:" ${{ env.LABELS_FILE }} || true)
          COMPONENT_LABELS=$(grep -c "component:" ${{ env.LABELS_FILE }} || true)
          
          echo "- 🎫 Type: $TYPE_LABELS" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 Priority: $PRIORITY_LABELS" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Status: $STATUS_LABELS" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Component: $COMPONENT_LABELS" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **Son Güncelleme:** $(date +'%d.%m.%Y %H:%M')" >> $GITHUB_STEP_SUMMARY

  # Etiket doğrulama
  validate-labels:
    name: ✅ Etiket Doğrulama
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📥 Repository'yi Çek
        uses: actions/checkout@v4

      - name: 🔍 Etiket Yapılandırmasını Doğrula
        run: |
          echo "## ✅ Etiket Doğrulama" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # YAML syntax kontrolü
          if python3 -c "import yaml; yaml.safe_load(open('${{ env.LABELS_FILE }}'))"; then
            echo "✅ YAML Syntax: Geçerli" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ YAML Syntax: Hatalı" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Gerekli alanları kontrol et
          if grep -q "name:" ${{ env.LABELS_FILE }} && grep -q "color:" ${{ env.LABELS_FILE }}; then
            echo "✅ Gerekli Alanlar: Mevcut" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Gerekli Alanlar: Eksik" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Renk formatı kontrolü
          INVALID_COLORS=$(grep "color:" ${{ env.LABELS_FILE }} | grep -vE "color: \"[0-9a-fA-F]{6}\"" | wc -l || true)
          if [ "$INVALID_COLORS" -eq 0 ]; then
            echo "✅ Renk Formatı: Geçerli" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Renk Formatı: Hatalı - $INVALID_COLORS geçersiz renk" >> $GITHUB_STEP_SUMMARY
          fi