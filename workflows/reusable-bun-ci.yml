name: Reusable Bun.js CI

on:
  workflow_call:
    inputs:
      bun-version:
        description: 'Bun version to use'
        required: false
        type: string
        default: 'latest'
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      working-directory:
        description: 'Working directory for the service'
        required: false
        type: string
        default: '.'
      run-e2e-tests:
        description: 'Run E2E tests'
        required: false
        type: boolean
        default: false
      build-command:
        description: 'Build command'
        required: false
        type: string
        default: 'build'

jobs:
  # Job 1: Code Quality
  lint:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ inputs.bun-version }}
          cache: true

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: bun install

      - name: Run lint
        working-directory: ${{ inputs.working-directory }}
        run: bun run lint

      - name: Check formatting
        working-directory: ${{ inputs.working-directory }}
        run: bun run format:check
        continue-on-error: true

      - name: TypeScript type check
        working-directory: ${{ inputs.working-directory }}
        run: bun run type-check
        continue-on-error: true

  # Job 2: Unit Tests
  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ inputs.bun-version }}
          cache: true

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: bun install

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: bun run test --coverage

      - name: Check coverage
        working-directory: ${{ inputs.working-directory }}
        run: |
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: ${coverage}%"
          if (( $(echo "$coverage < ${{ inputs.coverage-threshold }}" | bc -l) )); then
            echo "‚ùå Coverage ${coverage}% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          else
            echo "‚úÖ Coverage ${coverage}% meets threshold ${{ inputs.coverage-threshold }}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ inputs.working-directory }}/coverage/coverage-final.json
          flags: unittests
          name: codecov-bun

  # Job 3: Build
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ inputs.bun-version }}
          cache: true

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: bun install

      - name: Build project
        working-directory: ${{ inputs.working-directory }}
        run: bun run ${{ inputs.build-command }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ inputs.working-directory }}/dist
          retention-days: 7

  # Job 4: E2E Tests (Optional)
  e2e-test:
    name: üé≠ E2E Tests
    if: inputs.run-e2e-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ inputs.bun-version }}
          cache: true

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: bun install

      - name: Run E2E tests
        working-directory: ${{ inputs.working-directory }}
        run: bun run test:e2e