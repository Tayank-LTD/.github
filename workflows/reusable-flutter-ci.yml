name: Reusable Flutter CI

on:
  workflow_call:
    inputs:
      flutter-version:
        description: 'Flutter version to use'
        required: false
        type: string
        default: 'stable'
      flutter-channel:
        description: 'Flutter channel (stable, beta, dev)'
        required: false
        type: string
        default: 'stable'
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      working-directory:
        description: 'Working directory for the app'
        required: false
        type: string
        default: '.'
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        type: boolean
        default: false
      build-platforms:
        description: 'Platforms to build (android,ios,web)'
        required: false
        type: string
        default: 'android,ios'

jobs:
  # Job 1: Code Quality
  analyze:
    name: üîç Analyze & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Verify formatting
        working-directory: ${{ inputs.working-directory }}
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project
        working-directory: ${{ inputs.working-directory }}
        run: flutter analyze --fatal-infos

      - name: Check for outdated dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub outdated
        continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: üîê Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Run security audit
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Check for known vulnerabilities
          flutter pub audit || true
        continue-on-error: true

  # Job 3: Unit & Widget Tests
  test:
    name: üß™ Unit & Widget Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: flutter test --coverage --reporter expanded

      - name: Check coverage
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Install lcov for coverage processing
          sudo apt-get update
          sudo apt-get install -y lcov
          
          # Generate coverage report
          genhtml coverage/lcov.info -o coverage/html
          
          # Calculate coverage percentage
          coverage=$(lcov --summary coverage/lcov.info | grep "lines" | awk '{print $2}' | sed 's/%//')
          echo "Coverage: ${coverage}%"
          
          if (( $(echo "$coverage < ${{ inputs.coverage-threshold }}" | bc -l) )); then
            echo "‚ùå Coverage ${coverage}% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          else
            echo "‚úÖ Coverage ${coverage}% meets threshold ${{ inputs.coverage-threshold }}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ inputs.working-directory }}/coverage/lcov.info
          flags: unittests
          name: codecov-flutter

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ inputs.working-directory }}/coverage/html/
          retention-days: 7

  # Job 4: Integration Tests (Optional)
  integration-test:
    name: üîó Integration Tests
    if: inputs.run-integration-tests
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [29, 33]
        target: [default, google_apis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Setup Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: |
            cd ${{ inputs.working-directory }}
            flutter test integration_test

  # Job 5: Build Android
  build-android:
    name: ü§ñ Build Android
    if: contains(inputs.build-platforms, 'android')
    runs-on: ubuntu-latest
    needs: [analyze, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Build APK
        working-directory: ${{ inputs.working-directory }}
        run: flutter build apk --release

      - name: Build App Bundle
        working-directory: ${{ inputs.working-directory }}
        run: flutter build appbundle --release

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: ${{ inputs.working-directory }}/build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: Upload App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: android-bundle
          path: ${{ inputs.working-directory }}/build/app/outputs/bundle/release/app-release.aab
          retention-days: 7

  # Job 6: Build iOS
  build-ios:
    name: üçé Build iOS
    if: contains(inputs.build-platforms, 'ios')
    runs-on: macos-latest
    needs: [analyze, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Build iOS (no codesign)
        working-directory: ${{ inputs.working-directory }}
        run: flutter build ios --release --no-codesign

      - name: Upload iOS build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: ${{ inputs.working-directory }}/build/ios/iphoneos/Runner.app
          retention-days: 7

  # Job 7: Build Web
  build-web:
    name: üåê Build Web
    if: contains(inputs.build-platforms, 'web')
    runs-on: ubuntu-latest
    needs: [analyze, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Build web
        working-directory: ${{ inputs.working-directory }}
        run: flutter build web --release

      - name: Upload web build
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: ${{ inputs.working-directory }}/build/web/
          retention-days: 7

  # Job 8: Performance Tests
  performance:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Run performance tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Run performance profiling
          flutter test --performance
        continue-on-error: true

  # Job 9: Golden Tests (Screenshot comparison)
  golden-tests:
    name: üì∏ Golden Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version }}
          channel: ${{ inputs.flutter-channel }}
          cache: true

      - name: Get dependencies
        working-directory: ${{ inputs.working-directory }}
        run: flutter pub get

      - name: Run golden tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Run tests with --update-goldens to generate new screenshots
          # flutter test --update-goldens
          
          # Run normal golden tests
          flutter test --tags golden
        continue-on-error: true

  # Job 10: Build Size Analysis
  build-size:
    name: üìä Build Size Analysis
    runs-on: ubuntu-latest
    needs: [build-android]
    if: contains(inputs.build-platforms, 'android')
    steps:
      - name: Download APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk

      - name: Analyze APK size
        run: |
          apk_size=$(du -h app-release.apk | cut -f1)
          echo "APK Size: $apk_size"
          
          # Warning if APK > 50MB
          size_bytes=$(stat -f%z app-release.apk 2>/dev/null || stat -c%s app-release.apk)
          if [ "$size_bytes" -gt 52428800 ]; then
            echo "‚ö†Ô∏è APK size is large (> 50MB): $apk_size"
          else
            echo "‚úÖ APK size is reasonable: $apk_size"
          fi

  # Job 11: Notify
  notify:
    name: üì¢ Notify
    if: always()
    needs: [analyze, test]
    runs-on: ubuntu-latest
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.analyze.result }}" == "success" ] && \
             [ "${{ needs.test.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        run: |
          echo "${{ steps.status.outputs.emoji }} CI ${{ steps.status.outputs.status }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"